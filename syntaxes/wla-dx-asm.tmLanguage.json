{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "wla-dx-asm",
	"patterns": [{
		"include": "#asm"
	},{
		"name"	: "comment.block.disabled",
		"begin"	: "^",
		"end"	: "$"
	}],
	"fileTypes": [".wla", ".asm", ".s", ".a", ".i"],
	"repository": {
		"asm" : {
			"patterns" : [{
				"comment"	: "from beginning to end of document, or between .ASM/.ENDASM directives.",
				"begin"		: "\\A|(?<=^|\\s)(?i)(\\.ASM)\\b",
				"end"		: "\\z|(?<=^|\\s)(?i)(\\.ENDASM)\\b",
				"captures": {
					"1" : { "name" : "keyword.control.wla-dx-asm" }
				},
				"patterns"	: [{
					"include"	: "#root"
				}]
			},{
				"include"	: "#endasm"
			}]
		},
		"endasm" : {
			"patterns" : [{
				"comment"	: "Outside of the source code, we default to 'comment' format.",
				"name"		: "comment.block.disabled",
				"begin"		: "(?<=^|\\s)(?i:\\.ENDASM)\\b",
				"contentName" : "comment.block.disabled",
				"end"		: "(?<=^|\\s)(?i:\\.ASM)\\b",
				"patterns"	: [{
					"comment"	: "We need to pair these recursively.",
					"include"	: "#endasm"
				}]
			}]
		},
		"root" : {
			"patterns"	: [{
				"include"	: "#statements"
			},{
				"include"	: "#keywords"
			},{
				"include"	: "#mnemonics"
			},{
				"include"	: "#registers"
			},{
				"include"	: "#exprs"
			}]
		},
		"exprs"	: {
			"patterns"	: [{
				"include"	: "#comments"
			},{
				"include"	: "#strings"
			},{
				"include"	: "#numbers"
			},{
				"include"	: "#operators"
			},{
				"comment"	: "handle built-in functions, such as `bank()` before user labels.",
				"include"	: "#functions"
			},{
				"include"	: "#label"
			}]
		},

		"comments"	: {
			"patterns"	: [{
				"name"		: "comment.line.wla-dx-asm",
				"comment"	: "Special start-of-line only comment.",
				"begin" 	: "^\\*",
				"end"		: "(?=\\n)"
			},{
				"name"  	: "comment.wla-dx-asm",
				"begin" 	: ";",
				"end"   	: "(?=\\n)"
			},{
				"name"		: "comment.block.wla-dx-asm",
				"begin"		: "/\\*",
				"end"		: "\\*/"
			}]
		},

		"statements"	: {
			"patterns": [{
				"comment"	: "Deprecated Statements.",
				"name"		: "invalid.deprecated",
				"match"		: "(?<=^|\\W)\\.(?i:COMPUTE(?:CHECKSUM|COMPLEMENTCHECK))\\b"
			},{
				"comment"	: "Control flow statements.",
				"name"		: "keyword.control.wla-dx-asm",
				"match"		: "(?<=^|\\W)\\.(?i:D[BW]M|ELSE|END(?:IF|R)|FAIL|INC(?:DIR|LUDE)?|IF(?:LE(?:EQ)?|GR(?:EQ)?|N?(?:DEFM?|EQ)|EXISTS)?|INPUT|ORGA?|OUTNAME|PRINT[TV]?|REP(?:EAT)?|SLOT)\\b"
			},{
				"comment"	: "Statements begin a declaration. This is different to Keywords which only supplement a Statement.",
				"name"		: "keyword.wla-dx-asm",
				"match"		: "(?<=^|\\W)\\.(?i:(16|24|8)BIT|ACCU|ADDR|ARRAYD[BDLW]|ARRAYDEF(INE)?|ARRAY(IN|OUT)|ASC((II)?TABLE|STR)?|BACKGROUND|BANK|BASE|BITS|BLOCK|BR(EAKPOINT)?|BYTE?|CARTRIDGETYPE|COMPUTEGB(CHECKSUM|COMPLEMENTCHECK)|COMPUTE(SNES|SMS)CHECKSUM|COUNTRYCODE|DATA|D[BW](COS|M|RND|SIN)?|DDM?|DEF(INE)?|DESTINATIONCODE|DLM?|DS[BDLW]?|DSTRUCT|EMPTYFILL|END([ABEU]|BITS|(EMU|NATIVE)VECTOR|ME?|RO|SNES|ST?)|ENUM(ID)?|EQU|EXHIROM|EXPORT|FAIL|FARADDR|FASTROM|F(CLOSE|OPEN|READ|SEEK|SIZE|TELL)|FILTER|GBHEADER|HEX|HIROM|INC(BIN|DIR|LUDE)?|INDEX|INPUT|LICENSEECODE(NEW|OLD)|LONG|LOROM|MACRO|MEMORYMAP|NAME|NEXTU|NINTENDOLOGO|NOWDC|ORGA?|OUTNAME|PRINT[TV]?|RAMSECTION|RAMSIZE|REDEF(INE)?|REP(EA)?T|ROMBANKMAP|ROMBANKS(IZE)?|ROM(DMG|GBC(ONLY)?|SGB)|ROW|SDSCTAG|SECTION|SEED|SHIFT|SLOT|SLOWROM|SMC|SMS(HEADER|TAG)|SNES((EMU|NATIVE)VECTOR|HEADER)|STRINGMAP(TABLE)?|STRUCT|SYM(BOL)?|TABLE|UNBACKGROUND|UNDEF(INE)?|UNION|VERSION|WDC|WORD)\\b"
			}]
		},
		"keywords"	: {
			"patterns"	: [{
				"comment"	: "Main keywords.",
				"name"		: "support.type.property-name.wla-dx-asm",
				"match"		: "\\b(?:ABORT|AFTER|ALIGN|APPENDTO|ARGS|ASC|BANK(SIZE|STOTAL)?|BITWINDOW|BRK|CARTRIDGETYPE|CHECKSUMSIZE|COP|COUNTRY(CODE)?|CURRENT|DATA|DEC|DEFINITION|DEFAULTSLOT|DESC|DESTINATIONCODE|END|EXHIROM|EXPORT|FASTROM|FILTER|FORCECHECKSUM|FSIZE|HEX|HIROM|ID|INDEX|INDICES|IRQ(BREAK)?|KEEP|LICENSEECODE(NEW|OLD)|LOROM|MAP|NAME(SPACE)?|NINTENDOLOGO|NMI|OFFSET|ONCE|ORGA?|PRIORITY|PRODUCTCODE|RAMSIZE|READ|REGIONCODE|RESERVEDSPACE|RESET|RETURNORG|ROM(DMG|GBC(ONLY)?|SIZE)|SIZE|SKIP|SLOT(SIZE)?|SLOWROM|SRAMSIZE|START(FROM)?|STEP|SWAP|TO|UNUSED|VALUES?|VERSION|WINDOW)\\b"
			},{
				"comment"	: "The possible types of a `SECTION` or `.RAMSECTION`.",
				"name"  	: "support.type.property-name.wla-dx-asm",
				"match"		: "\\b(?i:FORCE|OVERWRITE|(?:SEMI(?:SUB)?|SUPER)?FREE)\\b"
			},{
				"comment"	: "Data types.",
				"name"		: "storage.type.wla-dx-asm",
				"match"		: "\\b(?i:(?:FAR)?ADDR|BYTE?|D(?:B|L|S[BLW]?|WB?)|INSTANCEOF|LONG|WORD)"
			}]
		},
		"mnemonics"	: {
			"comment"	: "Processor mnemonics",
			"patterns"	: [{
				"match"		: "(?<=\\s)(?i)(ad[cd]|and|asl|bbr[0-7]|bc[cs]|beq|bit|bmi|bne|bpl|bra|bv[cs]|brk|ccf|cl[cdiv]|cmp|cp(?:l|dr?|ir?|[xy])?|daa|de[acxy]|di|djnz|ei|eor|exx?|halt|im|in[acxy]|in(?:dr?|ir?)|jmp|jsr|ld(?:[axy]|dr?|ir?)?|lsr|neg|nop|ora?|ot[di]r|out[di]?|ph[apxy]|pl[apxy]|pop|push|res|ret[in]|r[lr](?:a|ca?|d)?|rmb[0-7]|ro[lr]|rst|rt[is]|sbc|scf|se[cdit]|sla|smb[0-7]|sr[al]|st[axyz]|sto?p|sub|swap|ta[xy]|tsx|t[rs]b|tx[as]|tya|wai|xor)(\\.[bwl])?\\b",
				"captures"	: {
					"1" 	: { "name" : "support.function.wla-dx-asm" },
					"2" 	: { "name" : "storage.modifier.wla-dx-asm" }
				}
			},{
				"comment"	: "Undocumented / illegal mnemonics, for CPUs that have them",
				"match"		: "(?<=\\s)(?i)(ahx|alr|anc|arr|axs|dcp|hlt|isc|jam|kil|la[sx]|rla|rra|sax|sh[xy]|slo|sre|tas|xaa)(\\.[bwl])?\\b",
				"captures"	: {
					"1" 	: { "name" : "support.function.illegal.wla-dx-asm" },
					"2" 	: { "name" : "storage.modifier.wla-dx-asm" }
				}
			},{
				"match"		: "(?<=\\s)(?i)(sll)(\\.[bwl])?\\b",
				"captures"	: {
					"1" 	: { "name" : "invalid.illegal.wla-dx-asm" },
					"2" 	: { "name" : "storage.modifier.wla-dx-asm" }
				}
			},{
				"match"		: "(?<=\\s)(?i)(jr)(?:\\s+(n?[cz]))?\\b",
				"captures"	: {
					"1" 	: { "name" : "support.function.wla-dx-asm" },
					"2" 	: { "name" : "support.constant" }
				}
			},{
				"match"		: "(?<=\\s)(?i)(call|jp|ret)(?:\\s+(n?z|n?c|m|p[oe]?))?\\b",
				"captures"	: {
					"1" 	: { "name" : "support.function.wla-dx-asm" },
					"2" 	: { "name" : "support.constant" }
				}
			}]
		},
		"registers"	: {
			"patterns"	: [{
				"comment"	: "Z80 shadow registers.",
				"name"		: "support.variable.register.shadow.wla-dx-asm",
				"match"		: "(?<=\\W)(?:AF?|BC?|C|DE?|E|HL?|L)'"
			},{
				"comment"	: "Z80/GB/8008/8080 registers.",
				"name"		: "support.variable.register.wla-dx-asm",
				"match"		: "(?<=\\W)(?:AF?|BC?|C|DE?|E|HL?|L|M|[IR]|IX[HL]?|IY[HL]?|PSW|SP)\\b"
			},{
				"comment"	: "6502/6510/65C(E)02 registers.",
				"name"		: "support.variable.register.wla-dx-asm",
				"match"		: "(?<=\\W)(?i:[axyz])\\b"
			},{
				"comment"	: "6809/6309 registers.",
				"name"		: "support.variable.register.wla-dx-asm",
				"match"		: "(?<=\\W)(?i:[ABDEFQSUVWXY]|CC|DP|MD|PCR?)\\b"
			}]
		},
		"label"		: {
			"patterns"	: [{
				"comment"	: "Pre-defined WLA-DX constants.",
				"name" 		: "support.constant.wla-dx-asm",
				"match" 	: "\\b(__label__|ARG_(IMMEDIATE|LABEL|NUMBER|PENDING_CALCULATION|STRING)|CADDR|NARGS|WLA_(?:FILENAME|TIME|VERSION))\\b"
			},{
				"comment"	: "Pre-defined WLA-DX variable.",
				"name" 		: "support.variable.wla-dx-asm",
				"match" 	: "(?<=\\W)(?i)_out\\b"
			},{
				"comment"	: "Macro expansions.",
				"name" 		: "support.constant.wla-dx-asm",
				"match"		: "\\\\[0-9.!@]"
			},{
				"name" 		: "entity.name.function.wla-dx-asm",
				"match"		: "(?i)[@a-z0-9_.]+"
			},{
				"comment"	: "Allow for substitutions inside a label-name.",
				"include"	: "#substitutions"
			}]
		},
		"substitutions"	: {
			"name"		: "constant.character.escape",
			"begin"		: "\\{",
			"end"		: "\\}",
			"patterns"	: [{
				"include"	: "#exprs"
			}]
		},
		"strings"		: {
			"patterns"	: [{
				"name"		: "string.quoted.single.wla-dx-asm",
				"comment"	: "Single character value",
				"match"		: "'.'"
			},{
				"name"		: "string.quoted.double.wla-dx-asm",
				"begin"		: "\"",
				"end"		: "\"(\\.length)?",
				"endCaptures": {
					"1"		: { "name" : "string.storage.modifier.string.wla-dx-asm" }
				},
				"patterns"	: [{
					"name"		: "constant.character.escape.wla-dx-asm",
					"match"		: "\\\\."
				},{
					"comment"	: "Expressions inside strings.",
					"include"	: "#substitutions"
				}]
			}]
		},
		"numbers"	: {
			"patterns"	: [{
				"comment"	: "Hexadecimal number: '$...'",
				"match"		: "(?i)([#!]\\s*)?(\\$[0-9A-F]{1,16})(\\.[lbw])?\\b",
				"captures" 	: {
					"1" 	: { "name" : "storage.modifier.wla-dx-asm" },
					"2" 	: { "name" : "constant.numeric.hexadecimal.wla-dx-asm" },
					"3" 	: { "name" : "storage.modifier.wla-dx-asm" }
				}
			},{
				"comment"	: "Hexadecimal number: '...h'",
				"match" 	: "(?i)([#!]\\s*)?([0-9][0-9A-F]*h)(\\.[lbw])?\\b",
				"captures" 	: {
					"1" 	: { "name" : "storage.modifier.wla-dx-asm" },
					"2" 	: { "name" : "constant.numeric.hexadecimal.wla-dx-asm" },
					"3" 	: { "name" : "storage.modifier.wla-dx-asm" }
				}
			},{
				"match" 	: "(?i)([#!]\\s*)?(%[01]{1,32})(\\.[lbw])?\\b",
				"captures" 	: {
					"1" 	: { "name" : "storage.modifier.wla-dx-asm" },
					"2" 	: { "name" : "constant.numeric.binary.wla-dx-asm" },
					"3" 	: { "name" : "storage.modifier.wla-dx-asm" }
				}
			},{
				"match" 	: "(?i)([#!]\\s*)?((?:[0-9]|[1-9][0-9]*)(?:\\.[0-9]+)?)(\\.[lbw])?\\b",
				"captures" 	: {
					"1" 	: { "name" : "storage.modifier.wla-dx-asm" },
					"2" 	: { "name" : "constant.numeric.decimal.wla-dx-asm" },
					"3" 	: { "name" : "storage.modifier.wla-dx-asm" }
				}
			},{
				"match"		: "(?i)([#!]\\s*)?(\\'.\\')(\\.[lbw])?\\b",
				"captures" 	: {
					"1" 	: { "name" : "storage.modifier.wla-dx-asm" },
					"2" 	: { "name" : "string.quoted.single.wla-dx" },
					"3" 	: { "name" : "storage.modifier.wla-dx-asm" }
				}
			}]
		},
		"operators"	: {
			"patterns"	: [{
				"comment"	: "Line continuation.",
				"name"		: "keyword.operator.continuation.wla-dx-asm",
				"match"		: "\\\\$"
			},{
				"name"		: "punctuation.separator.wla-dx-asm",
				"match"		: ","
			},{
				"name"		: "keyword.operator.assignment.wla-dx-asm",
				"match"		: "="
			},{
				"name"		: "keyword.operator.arithmetic.wla-dx-asm",
				"match"		: "\\+"
			},{
				"name"		: "keyword.operator.arithmetic.wla-dx-asm",
				"match"		: "-"
			},{
				"name"		: "keyword.operator.arithmetic.wla-dx-asm",
				"match"		: "\\*"
			},{
				"name"		: "keyword.operator.arithmetic.wla-dx-asm",
				"match"		: "\\^"
			},{
				"name"		: "keyword.operator.arithmetic.wla-dx-asm",
				"match"		: "/"
			},{
				"name"		: "keyword.operator.bitwise.wla-dx-asm",
				"match"		: "&" 
			},{
				"name"		: "keyword.operator.bitwise.wla-dx-asm",
				"match"		: "\\|"
			},{
				"name"		: "keyword.operator.bitwise.wla-dx-asm",
				"match"		: "~"
			},{
				"name"		: "keyword.operator.bitwise.wla-dx-asm",
				"match"		: "<<"
			},{
				"name"		: "keyword.operator.bitwise.wla-dx-asm",
				"match"		: ">>"
			},{
				"name"		: "keyword.operator.bitwise.wla-dx-asm",
				"match"		: "<"
			},{
				"name"		: "keyword.operator.bitwise.wla-dx-asm",
				"match"		: ">"
			},{
				"name"		: "punctuation.parens.begin.round.wla-dx-asm",
				"match"		: "\\("
			},{
				"name"		: "punctuation.parens.end.round.wla-dx-asm",
				"match"		: "\\)"
			},{
				"name"		: "punctuation.parens.begin.square.wla-dx-asm",
				"match"		: "\\["
			},{
				"name"		: "punctuation.parens.end.square.wla-dx-asm",
				"match"		: "\\]"
			}]
		},
		"functions"		: {
			"comment"	: "Built-in functions.",
			"name"		: "support.function.wla-dx-asm",
			"match"		: "\\b(?i:asc|defined|exists|(lo|hi)(byte|word)|bank(byte)?)\\b"
		},

		"section-name"	: {
			"comment"	: "Section names are unique in that they can include a preceding `!` to prevent unused sections from being dropped, as well as in the case of the `APPENDTO` property can be prefixed with `*:` to refer to the global namespace, over any local namespace."
		}
	},
	"scopeName"	: "source.wla-dx-asm"
}